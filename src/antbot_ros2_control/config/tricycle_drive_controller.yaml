controller_manager:
  ros__parameters:
    update_rate: 100 # Hz

joint_state_broadcaster:
  ros__parameters:
    type: joint_state_broadcaster/JointStateBroadcaster
    # extra_joints: ["right_wheel_joint", "left_wheel_joint"]

tricycle_controller:
  ros__parameters:
    type: tricycle_controller/TricycleController

    # Model
    traction_joint_name: traction_joint # Name of traction joint in URDF
    steering_joint_name: steering_joint # Name of steering joint in URDF
    wheel_radius: 0.1016 # Radius of front wheel
    wheelbase: 0.62 # Distance between center of back wheels and front wheel

    # Odometry
    odom_frame_id: odom
    base_frame_id: base_footprint
    open_loop: false # if True, uses cmd_vel instead of hardware interface feedback to compute odometry
    enable_odom_tf: false # If True, publishes odom<-base_link TF
    odom_only_twist: true # If True, publishes on /odom only linear.x and angular.z; Useful for computing odometry in another node, e.g robot_localization's ekf
    pose_covariance_diagonal: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # Need to be set if fusing odom with other localization source
    twist_covariance_diagonal: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # Need to be set if fusing odom with other localization source
    velocity_rolling_window_size: 10 # Rolling window size of rcppmath::RollingMeanAccumulator applied on linear and angular speeds published on odom

    # Rate Limiting
    traction: # All values should be positive
      # min_velocity: 0.0
      max_velocity: 1000.0
      # min_acceleration: 0.0
      max_acceleration: 5.0
      # min_deceleration: 0.0
      max_deceleration: 8.0
      # min_jerk: 0.0
      # max_jerk: 1000.0
    steering:
      min_position: -0.698
      max_position: 0.698
      # min_velocity: 0.0
      max_velocity: 2.0
      # min_acceleration: 0.0
      # max_acceleration: 1000.0

    # cmd_vel input
    cmd_vel_timeout: 500 # In milliseconds. Timeout to stop if no cmd_vel is received